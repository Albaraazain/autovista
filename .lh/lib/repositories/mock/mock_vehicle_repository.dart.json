{
    "sourceFile": "lib/repositories/mock/mock_vehicle_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733507878988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733507878988,
            "name": "Commit-0",
            "content": "// lib/repositories/mock/mock_vehicle_repository.dart\r\nimport '../interfaces/vehicle_repository.dart';\r\nimport '../../models/vehicle_model.dart';\r\n\r\nclass MockVehicleRepository implements VehicleRepository {\r\n  final Map<String, VehicleModel> _vehicles = {};\r\n\r\n  @override\r\n  Future<List<VehicleModel>> getVehiclesByUserId(String userId) async {\r\n    await Future.delayed(const Duration(milliseconds: 500));\r\n    return _vehicles.values\r\n        .where((vehicle) => vehicle.userId == userId)\r\n        .toList();\r\n  }\r\n\r\n  @override\r\n  Future<VehicleModel?> getVehicleById(String vehicleId) async {\r\n    await Future.delayed(const Duration(milliseconds: 500));\r\n    return _vehicles[vehicleId];\r\n  }\r\n\r\n  @override\r\n  Future<VehicleModel> addVehicle(VehicleModel vehicle) async {\r\n    await Future.delayed(const Duration(milliseconds: 500));\r\n    _vehicles[vehicle.id] = vehicle;\r\n    return vehicle;\r\n  }\r\n\r\n  @override\r\n  Future<void> updateVehicle(VehicleModel vehicle) async {\r\n    await Future.delayed(const Duration(milliseconds: 500));\r\n    _vehicles[vehicle.id] = vehicle;\r\n  }\r\n\r\n  @override\r\n  Future<void> deleteVehicle(String vehicleId) async {\r\n    await Future.delayed(const Duration(milliseconds: 500));\r\n    _vehicles.remove(vehicleId);\r\n  }\r\n}"
        }
    ]
}