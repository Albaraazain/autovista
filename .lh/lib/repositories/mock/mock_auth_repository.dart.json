{
    "sourceFile": "lib/repositories/mock/mock_auth_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733505567242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733505640402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,33 @@\n-// lib/repositories/mock/mock_auth_repository.dart\r\n+import 'dart:async';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import '../interfaces/auth_repository.dart';\r\n \r\n+class MockUser implements User {\r\n+  @override\r\n+  final String uid;\r\n+  @override\r\n+  final String? email;\r\n+  @override\r\n+  final String? displayName;\r\n+\r\n+  MockUser({required this.uid, this.email, this.displayName});\r\n+\r\n+  // Implement other User methods with dummy returns...\r\n+  @override\r\n+  dynamic noSuchMethod(Invocation invocation) => super.noSuchMethod(invocation);\r\n+}\r\n+\r\n+class MockUserCredential implements UserCredential {\r\n+  @override\r\n+  final User? user;\r\n+\r\n+  MockUserCredential({this.user});\r\n+\r\n+  @override\r\n+  dynamic noSuchMethod(Invocation invocation) => super.noSuchMethod(invocation);\r\n+}\r\n+\r\n class MockAuthRepository implements AuthRepository {\r\n   User? _currentUser;\r\n   final _authStateController = StreamController<User?>.broadcast();\r\n \r\n@@ -28,9 +53,9 @@\n       );\r\n     }\r\n \r\n     // Simulate successful login\r\n-    _currentUser = User(\r\n+    _currentUser = MockUser(\r\n       uid: 'mock-uid',\r\n       email: email,\r\n       displayName: 'Mock User',\r\n     );\r\n@@ -38,6 +63,47 @@\n \r\n     return MockUserCredential(user: _currentUser);\r\n   }\r\n \r\n-  // Implement other methods similarly...\r\n+  @override\r\n+  Future<UserCredential> signUp({\r\n+    required String email,\r\n+    required String password,\r\n+    required String name,\r\n+    required String location,\r\n+  }) async {\r\n+    // Simulate network delay\r\n+    await Future.delayed(const Duration(seconds: 1));\r\n+\r\n+    // Simulate basic validation\r\n+    if (!email.contains('@') || password.length < 6) {\r\n+      throw FirebaseAuthException(\r\n+        code: 'invalid-credential',\r\n+        message: 'Invalid email or password',\r\n+      );\r\n+    }\r\n+\r\n+    // Simulate successful registration\r\n+    _currentUser = MockUser(\r\n+      uid: 'mock-uid-${DateTime.now().millisecondsSinceEpoch}',\r\n+      email: email,\r\n+      displayName: name,\r\n+    );\r\n+    _authStateController.add(_currentUser);\r\n+\r\n+    return MockUserCredential(user: _currentUser);\r\n+  }\r\n+\r\n+  @override\r\n+  Future<void> signOut() async {\r\n+    // Simulate network delay\r\n+    await Future.delayed(const Duration(seconds: 1));\r\n+\r\n+    _currentUser = null;\r\n+    _authStateController.add(null);\r\n+  }\r\n+\r\n+  // Clean up resources\r\n+  void dispose() {\r\n+    _authStateController.close();\r\n+  }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733505567242,
            "name": "Commit-0",
            "content": "// lib/repositories/mock/mock_auth_repository.dart\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\nimport '../interfaces/auth_repository.dart';\r\n\r\nclass MockAuthRepository implements AuthRepository {\r\n  User? _currentUser;\r\n  final _authStateController = StreamController<User?>.broadcast();\r\n\r\n  @override\r\n  Stream<User?> get authStateChanges => _authStateController.stream;\r\n\r\n  @override\r\n  User? get currentUser => _currentUser;\r\n\r\n  @override\r\n  Future<UserCredential> signIn({\r\n    required String email,\r\n    required String password,\r\n  }) async {\r\n    // Simulate network delay\r\n    await Future.delayed(const Duration(seconds: 1));\r\n\r\n    // Simulate basic validation\r\n    if (!email.contains('@') || password.length < 6) {\r\n      throw FirebaseAuthException(\r\n        code: 'invalid-credential',\r\n        message: 'Invalid email or password',\r\n      );\r\n    }\r\n\r\n    // Simulate successful login\r\n    _currentUser = User(\r\n      uid: 'mock-uid',\r\n      email: email,\r\n      displayName: 'Mock User',\r\n    );\r\n    _authStateController.add(_currentUser);\r\n\r\n    return MockUserCredential(user: _currentUser);\r\n  }\r\n\r\n  // Implement other methods similarly...\r\n}"
        }
    ]
}