{
    "sourceFile": "lib/repositories/firebase/firebase_user_repository.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733506994162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733507440341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   Future<UserModel?> getUserById(String uid) async {\r\n     try {\r\n       final doc = await _firestore.collection('users').doc(uid).get();\r\n       if (doc.exists) {\r\n-        return UserModel.fromJson(doc.data() as Map<String, dynamic>);\r\n+        return UserModel.fromMap(doc.data() as Map<String, dynamic>);\r\n       }\r\n       return null;\r\n     } catch (e) {\r\n       print('Error getting user: $e');\r\n@@ -39,9 +39,9 @@\n \r\n   @override\r\n   Future<void> updateUser(UserModel user) async {\r\n     try {\r\n-      await _firestore.collection('users').doc(user.uid).update(user.toJson());\r\n+      await _firestore.collection('users').doc(user.uid).update(user.toMap());\r\n     } catch (e) {\r\n       print('Error updating user: $e');\r\n       rethrow;\r\n     }\r\n@@ -55,5 +55,5 @@\n       print('Error deleting user: $e');\r\n       rethrow;\r\n     }\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733506994162,
            "name": "Commit-0",
            "content": "// lib/repositories/firebase/firebase_user_repository.dart\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport '../interfaces/user_repository.dart';\r\nimport '../../models/user_model.dart';\r\n\r\nclass FirebaseUserRepository implements UserRepository {\r\n  final FirebaseFirestore _firestore;\r\n\r\n  FirebaseUserRepository({FirebaseFirestore? firestore})\r\n      : _firestore = firestore ?? FirebaseFirestore.instance;\r\n\r\n  @override\r\n  Future<UserModel?> getUserById(String uid) async {\r\n    try {\r\n      final doc = await _firestore.collection('users').doc(uid).get();\r\n      if (doc.exists) {\r\n        return UserModel.fromJson(doc.data() as Map<String, dynamic>);\r\n      }\r\n      return null;\r\n    } catch (e) {\r\n      print('Error getting user: $e');\r\n      rethrow;\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<String> getUserName(String uid) async {\r\n    try {\r\n      final doc = await _firestore.collection('users').doc(uid).get();\r\n      if (doc.exists) {\r\n        return doc.data()?['name'] ?? 'User';\r\n      }\r\n      return 'User';\r\n    } catch (e) {\r\n      print('Error getting username: $e');\r\n      return 'User';\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<void> updateUser(UserModel user) async {\r\n    try {\r\n      await _firestore.collection('users').doc(user.uid).update(user.toJson());\r\n    } catch (e) {\r\n      print('Error updating user: $e');\r\n      rethrow;\r\n    }\r\n  }\r\n\r\n  @override\r\n  Future<void> deleteUser(String uid) async {\r\n    try {\r\n      await _firestore.collection('users').doc(uid).delete();\r\n    } catch (e) {\r\n      print('Error deleting user: $e');\r\n      rethrow;\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}