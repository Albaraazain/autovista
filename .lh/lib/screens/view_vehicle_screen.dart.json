{
    "sourceFile": "lib/screens/view_vehicle_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733501536943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733501536943,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport '../models/car_model.dart';\r\n\r\nclass ViewVehicleScreen extends StatefulWidget {\r\n  final Map<String, dynamic>? vehicleData; // Vehicle data if editing\r\n  final String? carId; // Car ID if editing an existing car (Firebase document ID)\r\n  final String userId; // Firebase UID for the logged-in user\r\n\r\n  const ViewVehicleScreen({\r\n    Key? key,\r\n    this.vehicleData,\r\n    this.carId,\r\n    required this.userId,\r\n  }) : super(key: key);\r\n\r\n  @override\r\n  State<ViewVehicleScreen> createState() => _ViewVehicleScreenState();\r\n}\r\n\r\nclass _ViewVehicleScreenState extends State<ViewVehicleScreen> {\r\n  final _formKey = GlobalKey<FormState>();\r\n  late TextEditingController _brandController;\r\n  late TextEditingController _modelController;\r\n  late TextEditingController _engineTypeController;\r\n  late TextEditingController _mileageController;\r\n  late TextEditingController _regionController;\r\n  late TextEditingController _makeYearController;\r\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _brandController = TextEditingController(text: widget.vehicleData?['brand'] ?? '');\r\n    _modelController = TextEditingController(text: widget.vehicleData?['model'] ?? '');\r\n    _engineTypeController = TextEditingController(text: widget.vehicleData?['engine_type'] ?? '');\r\n    _mileageController = TextEditingController(text: widget.vehicleData?['mileage']?.toString() ?? '');\r\n    _regionController = TextEditingController(text: widget.vehicleData?['region'] ?? '');\r\n    _makeYearController = TextEditingController(text: widget.vehicleData?['make_year']?.toString() ?? '');\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _brandController.dispose();\r\n    _modelController.dispose();\r\n    _engineTypeController.dispose();\r\n    _mileageController.dispose();\r\n    _regionController.dispose();\r\n    _makeYearController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  Future<void> _saveVehicleInfo() async {\r\n    if (_formKey.currentState!.validate()) {\r\n      final car = Car(\r\n        id: widget.carId ?? '', // Use Firebase document ID or empty for new cars\r\n        userId: widget.userId, // Use Firebase UID\r\n        brand: _brandController.text,\r\n        model: _modelController.text,\r\n        engineType: _engineTypeController.text,\r\n        mileage: int.tryParse(_mileageController.text) ?? 0,\r\n        region: _regionController.text,\r\n        makeYear: int.tryParse(_makeYearController.text) ?? 0,\r\n      );\r\n\r\n      try {\r\n        if (widget.carId == null) {\r\n          // Register new car\r\n          await _registerCar(car);\r\n        } else {\r\n          // Update existing car\r\n          await _updateCar(car);\r\n        }\r\n\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          const SnackBar(content: Text(\"Vehicle info saved successfully!\")),\r\n        );\r\n\r\n        Navigator.pop(context);\r\n      } catch (e) {\r\n        ScaffoldMessenger.of(context).showSnackBar(\r\n          SnackBar(content: Text(\"Error saving vehicle: $e\")),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> _registerCar(Car car) async {\r\n    try {\r\n      await _firestore.collection('cars').add(car.toJson());\r\n      print(\"Car added successfully!\");\r\n    } catch (e) {\r\n      throw Exception(\"Failed to register car: $e\");\r\n    }\r\n  }\r\n\r\n  Future<void> _updateCar(Car car) async {\r\n    if (widget.carId == null) return;\r\n\r\n    try {\r\n      await _firestore.collection('cars').doc(widget.carId).update(car.toJson());\r\n      print(\"Car updated successfully!\");\r\n    } catch (e) {\r\n      throw Exception(\"Failed to update car: $e\");\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text(\"View/Edit Vehicle Info\"),\r\n      ),\r\n      body: Padding(\r\n        padding: const EdgeInsets.all(16.0),\r\n        child: Form(\r\n          key: _formKey,\r\n          child: ListView(\r\n            children: [\r\n              TextFormField(\r\n                controller: _brandController,\r\n                decoration: const InputDecoration(labelText: \"Brand\"),\r\n                validator: (value) => value == null || value.isEmpty ? \"Please enter the brand\" : null,\r\n              ),\r\n              const SizedBox(height: 16),\r\n              TextFormField(\r\n                controller: _modelController,\r\n                decoration: const InputDecoration(labelText: \"Model\"),\r\n                validator: (value) => value == null || value.isEmpty ? \"Please enter the model\" : null,\r\n              ),\r\n              const SizedBox(height: 16),\r\n              TextFormField(\r\n                controller: _engineTypeController,\r\n                decoration: const InputDecoration(labelText: \"Engine Type\"),\r\n                validator: (value) => value == null || value.isEmpty ? \"Please enter the engine type\" : null,\r\n              ),\r\n              const SizedBox(height: 16),\r\n              TextFormField(\r\n                controller: _mileageController,\r\n                decoration: const InputDecoration(labelText: \"Mileage (km)\"),\r\n                keyboardType: TextInputType.number,\r\n                validator: (value) => value == null || value.isEmpty ? \"Please enter the mileage\" : null,\r\n              ),\r\n              const SizedBox(height: 16),\r\n              TextFormField(\r\n                controller: _regionController,\r\n                decoration: const InputDecoration(labelText: \"Region\"),\r\n                validator: (value) => value == null || value.isEmpty ? \"Please enter the region\" : null,\r\n              ),\r\n              const SizedBox(height: 16),\r\n              TextFormField(\r\n                controller: _makeYearController,\r\n                decoration: const InputDecoration(labelText: \"Make Year\"),\r\n                keyboardType: TextInputType.number,\r\n                validator: (value) => value == null || value.isEmpty ? \"Please enter the make year\" : null,\r\n              ),\r\n              const SizedBox(height: 32),\r\n              ElevatedButton(\r\n                onPressed: _saveVehicleInfo,\r\n                child: const Text(\"Save Vehicle Info\"),\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}