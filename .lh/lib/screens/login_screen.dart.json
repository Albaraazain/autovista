{
    "sourceFile": "lib/screens/login_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1733502264359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1733502264359,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\n\r\nclass LoginScreen extends StatefulWidget {\r\n  const LoginScreen({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<LoginScreen> createState() => _LoginScreenState();\r\n}\r\n\r\nclass _LoginScreenState extends State<LoginScreen> {\r\n  final _emailController = TextEditingController();\r\n  final _passwordController = TextEditingController();\r\n  final _formKey = GlobalKey<FormState>();\r\n  final FirebaseAuth _auth = FirebaseAuth.instance; // Firebase Auth instance\r\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance; // Firestore instance\r\n\r\n  bool _isLoading = false;\r\n\r\n  Future<void> _loginUser() async {\r\n    setState(() {\r\n      _isLoading = true; // Show loading indicator\r\n    });\r\n\r\n    try {\r\n      // Log in user with Firebase\r\n      UserCredential userCredential = await _auth.signInWithEmailAndPassword(\r\n        email: _emailController.text.trim(),\r\n        password: _passwordController.text.trim(),\r\n      );\r\n\r\n      // Fetch user details from Firestore\r\n      final User? user = userCredential.user;\r\n      if (user != null) {\r\n        final DocumentSnapshot userDoc =\r\n        await _firestore.collection('users').doc(user.uid).get();\r\n\r\n        if (userDoc.exists) {\r\n          final userData = userDoc.data() as Map<String, dynamic>;\r\n          print(\"User Data: $userData\");\r\n        } else {\r\n          throw Exception(\"User data not found in Firestore.\");\r\n        }\r\n      }\r\n\r\n      // Navigate to HomeScreen, passing the Firebase UID\r\n      Navigator.pushReplacementNamed(\r\n        context,\r\n        '/home',\r\n        arguments: user?.uid, // Pass Firebase UID to HomeScreen\r\n      );\r\n\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text(\"Login successful!\")),\r\n      );\r\n    } on FirebaseAuthException catch (e) {\r\n      String errorMessage = \"Login failed.\";\r\n      if (e.code == 'user-not-found') {\r\n        errorMessage = \"No user found with this email.\";\r\n      } else if (e.code == 'wrong-password') {\r\n        errorMessage = \"Incorrect password.\";\r\n      } else if (e.code == 'invalid-email') {\r\n        errorMessage = \"Invalid email format.\";\r\n      }\r\n\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        SnackBar(content: Text(errorMessage)),\r\n      );\r\n    } catch (e) {\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        SnackBar(content: Text(\"An error occurred: $e\")),\r\n      );\r\n    } finally {\r\n      setState(() {\r\n        _isLoading = false; // Hide loading indicator\r\n      });\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(title: const Text(\"Login\")),\r\n      body: Padding(\r\n        padding: const EdgeInsets.all(16.0),\r\n        child: Form(\r\n          key: _formKey,\r\n          child: SingleChildScrollView(\r\n            child: Column(\r\n              mainAxisAlignment: MainAxisAlignment.center,\r\n              children: [\r\n                TextFormField(\r\n                  controller: _emailController,\r\n                  decoration: const InputDecoration(labelText: \"Email\"),\r\n                  keyboardType: TextInputType.emailAddress,\r\n                  validator: (value) {\r\n                    if (value == null || value.isEmpty) {\r\n                      return \"Please enter your email\";\r\n                    } else if (!RegExp(r'\\S+@\\S+\\.\\S+').hasMatch(value)) {\r\n                      return \"Enter a valid email\";\r\n                    }\r\n                    return null;\r\n                  },\r\n                ),\r\n                const SizedBox(height: 16),\r\n                TextFormField(\r\n                  controller: _passwordController,\r\n                  decoration: const InputDecoration(labelText: \"Password\"),\r\n                  obscureText: true,\r\n                  validator: (value) {\r\n                    if (value == null || value.isEmpty) {\r\n                      return \"Please enter your password\";\r\n                    } else if (value.length < 6) {\r\n                      return \"Password must be at least 6 characters\";\r\n                    }\r\n                    return null;\r\n                  },\r\n                ),\r\n                const SizedBox(height: 32),\r\n                _isLoading\r\n                    ? const CircularProgressIndicator()\r\n                    : ElevatedButton(\r\n                  onPressed: () async {\r\n                    if (_formKey.currentState!.validate()) {\r\n                      await _loginUser();\r\n                    }\r\n                  },\r\n                  child: const Text(\"Login\"),\r\n                ),\r\n                const SizedBox(height: 16),\r\n                TextButton(\r\n                  onPressed: () {\r\n                    Navigator.pushNamed(context, '/signup');\r\n                  },\r\n                  child: const Text(\"Don't have an account? Sign up\"),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _emailController.dispose();\r\n    _passwordController.dispose();\r\n    super.dispose();\r\n  }\r\n}\r\n"
        }
    ]
}