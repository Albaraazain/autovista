{
    "sourceFile": "lib/screens/signup_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1733503015772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733503023047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,80 +20,80 @@\n   final FirebaseFirestore _firestore = FirebaseFirestore.instance; // Firestore instance\r\n \r\n   bool _isLoading = false;\r\n \r\n-Future<void> _registerUser() async {\r\n-  setState(() {\r\n-    _isLoading = true;\r\n-  });\r\n+  Future<void> _registerUser() async {\r\n+    setState(() {\r\n+      _isLoading = true;\r\n+    });\r\n \r\n-  try {\r\n-    // Sanitize inputs\r\n-    final String sanitizedName = _nameController.text.trim();\r\n-    final String sanitizedEmail = _emailController.text.trim().toLowerCase();\r\n-    final String sanitizedLocation = _locationController.text.trim();\r\n+    try {\r\n+      // Sanitize inputs\r\n+      final String sanitizedName = _nameController.text.trim();\r\n+      final String sanitizedEmail = _emailController.text.trim().toLowerCase();\r\n+      final String sanitizedLocation = _locationController.text.trim();\r\n \r\n-    // Validate email format\r\n-    if (!RegExp(r'^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+').hasMatch(sanitizedEmail)) {\r\n-      throw Exception('Invalid email format');\r\n-    }\r\n+      // Validate email format\r\n+      if (!RegExp(r'^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+').hasMatch(sanitizedEmail)) {\r\n+        throw Exception('Invalid email format');\r\n+      }\r\n \r\n-    // Create user with email and password\r\n-    UserCredential userCredential = await _auth.createUserWithEmailAndPassword(\r\n-      email: sanitizedEmail,\r\n-      password: _passwordController.text, // Password shouldn't be trimmed\r\n-    );\r\n+      // Create user with email and password\r\n+      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(\r\n+        email: sanitizedEmail,\r\n+        password: _passwordController.text, // Password shouldn't be trimmed\r\n+      );\r\n \r\n-    // Save additional user information to Firestore\r\n-    User? user = userCredential.user;\r\n-    if (user != null) {\r\n-      await _firestore.collection('users').doc(user.uid).set({\r\n-        'uid': user.uid,\r\n-        'name': sanitizedName,\r\n-        'email': sanitizedEmail,\r\n-        'location': sanitizedLocation,\r\n-        'created_at': FieldValue.serverTimestamp(),\r\n-      });\r\n+      // Save additional user information to Firestore\r\n+      User? user = userCredential.user;\r\n+      if (user != null) {\r\n+        await _firestore.collection('users').doc(user.uid).set({\r\n+          'uid': user.uid,\r\n+          'name': sanitizedName,\r\n+          'email': sanitizedEmail,\r\n+          'location': sanitizedLocation,\r\n+          'created_at': FieldValue.serverTimestamp(),\r\n+        });\r\n \r\n-      // Update display name in Firebase Auth\r\n-      await user.updateDisplayName(sanitizedName);\r\n+        // Update display name in Firebase Auth\r\n+        await user.updateDisplayName(sanitizedName);\r\n \r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          const SnackBar(content: Text(\"Registration successful!\")),\r\n+        );\r\n+\r\n+        // Navigate to home screen\r\n+        Navigator.pushReplacementNamed(context, '/home', arguments: user.uid);\r\n+      }\r\n+    } on FirebaseAuthException catch (e) {\r\n+      String errorMessage = \"Registration failed.\";\r\n+      switch (e.code) {\r\n+        case 'email-already-in-use':\r\n+          errorMessage = \"This email is already registered.\";\r\n+          break;\r\n+        case 'weak-password':\r\n+          errorMessage = \"Password should be at least 6 characters.\";\r\n+          break;\r\n+        case 'invalid-email':\r\n+          errorMessage = \"Please enter a valid email address.\";\r\n+          break;\r\n+        default:\r\n+          errorMessage = \"Registration error: ${e.message}\";\r\n+      }\r\n       ScaffoldMessenger.of(context).showSnackBar(\r\n-        const SnackBar(content: Text(\"Registration successful!\")),\r\n+        SnackBar(content: Text(errorMessage)),\r\n       );\r\n-\r\n-      // Navigate to home screen\r\n-      Navigator.pushReplacementNamed(context, '/home', arguments: user.uid);\r\n+    } catch (e) {\r\n+      print('Registration error details: $e'); // For debugging\r\n+      ScaffoldMessenger.of(context).showSnackBar(\r\n+        SnackBar(content: Text(\"Registration error: ${e.toString()}\")),\r\n+      );\r\n+    } finally {\r\n+      setState(() {\r\n+        _isLoading = false;\r\n+      });\r\n     }\r\n-  } on FirebaseAuthException catch (e) {\r\n-    String errorMessage = \"Registration failed.\";\r\n-    switch (e.code) {\r\n-      case 'email-already-in-use':\r\n-        errorMessage = \"This email is already registered.\";\r\n-        break;\r\n-      case 'weak-password':\r\n-        errorMessage = \"Password should be at least 6 characters.\";\r\n-        break;\r\n-      case 'invalid-email':\r\n-        errorMessage = \"Please enter a valid email address.\";\r\n-        break;\r\n-      default:\r\n-        errorMessage = \"Registration error: ${e.message}\";\r\n-    }\r\n-    ScaffoldMessenger.of(context).showSnackBar(\r\n-      SnackBar(content: Text(errorMessage)),\r\n-    );\r\n-  } catch (e) {\r\n-    print('Registration error details: $e'); // For debugging\r\n-    ScaffoldMessenger.of(context).showSnackBar(\r\n-      SnackBar(content: Text(\"Registration error: ${e.toString()}\")),\r\n-    );\r\n-  } finally {\r\n-    setState(() {\r\n-      _isLoading = false;\r\n-    });\r\n   }\r\n-}\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n"
                },
                {
                    "date": 1733503354839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,80 +21,71 @@\n \r\n   bool _isLoading = false;\r\n \r\n   Future<void> _registerUser() async {\r\n-    setState(() {\r\n-      _isLoading = true;\r\n-    });\r\n+    if (!_formKey.currentState!.validate()) {\r\n+      return;\r\n+    }\r\n \r\n+    setState(() => _isLoading = true);\r\n+\r\n     try {\r\n-      // Sanitize inputs\r\n-      final String sanitizedName = _nameController.text.trim();\r\n-      final String sanitizedEmail = _emailController.text.trim().toLowerCase();\r\n-      final String sanitizedLocation = _locationController.text.trim();\r\n+      final authService = AuthService();\r\n+      await authService.signUp(\r\n+        name: _nameController.text,\r\n+        email: _emailController.text,\r\n+        password: _passwordController.text,\r\n+        location: _locationController.text,\r\n+      );\r\n \r\n-      // Validate email format\r\n-      if (!RegExp(r'^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+').hasMatch(sanitizedEmail)) {\r\n-        throw Exception('Invalid email format');\r\n-      }\r\n+      if (!mounted) return;\r\n \r\n-      // Create user with email and password\r\n-      UserCredential userCredential = await _auth.createUserWithEmailAndPassword(\r\n-        email: sanitizedEmail,\r\n-        password: _passwordController.text, // Password shouldn't be trimmed\r\n+      // Show success message\r\n+      ScaffoldMessenger.of(context).showSnackBar(\r\n+        const SnackBar(content: Text(\"Registration successful!\")),\r\n       );\r\n \r\n-      // Save additional user information to Firestore\r\n-      User? user = userCredential.user;\r\n-      if (user != null) {\r\n-        await _firestore.collection('users').doc(user.uid).set({\r\n-          'uid': user.uid,\r\n-          'name': sanitizedName,\r\n-          'email': sanitizedEmail,\r\n-          'location': sanitizedLocation,\r\n-          'created_at': FieldValue.serverTimestamp(),\r\n-        });\r\n+      // Navigate to home\r\n+      Navigator.pushReplacementNamed(\r\n+        context,\r\n+        '/home',\r\n+        arguments: _auth.currentUser?.uid,\r\n+      );\r\n+    } on FirebaseAuthException catch (e) {\r\n+      String errorMessage = _getErrorMessage(e);\r\n+      if (!mounted) return;\r\n \r\n-        // Update display name in Firebase Auth\r\n-        await user.updateDisplayName(sanitizedName);\r\n-\r\n-        ScaffoldMessenger.of(context).showSnackBar(\r\n-          const SnackBar(content: Text(\"Registration successful!\")),\r\n-        );\r\n-\r\n-        // Navigate to home screen\r\n-        Navigator.pushReplacementNamed(context, '/home', arguments: user.uid);\r\n-      }\r\n-    } on FirebaseAuthException catch (e) {\r\n-      String errorMessage = \"Registration failed.\";\r\n-      switch (e.code) {\r\n-        case 'email-already-in-use':\r\n-          errorMessage = \"This email is already registered.\";\r\n-          break;\r\n-        case 'weak-password':\r\n-          errorMessage = \"Password should be at least 6 characters.\";\r\n-          break;\r\n-        case 'invalid-email':\r\n-          errorMessage = \"Please enter a valid email address.\";\r\n-          break;\r\n-        default:\r\n-          errorMessage = \"Registration error: ${e.message}\";\r\n-      }\r\n       ScaffoldMessenger.of(context).showSnackBar(\r\n         SnackBar(content: Text(errorMessage)),\r\n       );\r\n     } catch (e) {\r\n-      print('Registration error details: $e'); // For debugging\r\n+      if (!mounted) return;\r\n+\r\n       ScaffoldMessenger.of(context).showSnackBar(\r\n-        SnackBar(content: Text(\"Registration error: ${e.toString()}\")),\r\n+        SnackBar(content: Text('Registration failed: ${e.toString()}')),\r\n       );\r\n     } finally {\r\n-      setState(() {\r\n-        _isLoading = false;\r\n-      });\r\n+      if (mounted) {\r\n+        setState(() => _isLoading = false);\r\n+      }\r\n     }\r\n   }\r\n \r\n+  String _getErrorMessage(FirebaseAuthException e) {\r\n+    switch (e.code) {\r\n+      case 'email-already-in-use':\r\n+        return 'This email is already registered';\r\n+      case 'invalid-email':\r\n+        return 'Please enter a valid email address';\r\n+      case 'operation-not-allowed':\r\n+        return 'Email/password accounts are not enabled';\r\n+      case 'weak-password':\r\n+        return 'Please enter a stronger password';\r\n+      default:\r\n+        return 'Registration failed: ${e.message}';\r\n+    }\r\n+  }\r\n+\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n"
                },
                {
                    "date": 1733504140961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,34 +30,31 @@\n     setState(() => _isLoading = true);\r\n \r\n     try {\r\n       final authService = AuthService();\r\n-      await authService.signUp(\r\n+      final userCredential = await authService.signUp(\r\n         name: _nameController.text,\r\n         email: _emailController.text,\r\n         password: _passwordController.text,\r\n         location: _locationController.text,\r\n       );\r\n \r\n       if (!mounted) return;\r\n \r\n-      // Show success message\r\n       ScaffoldMessenger.of(context).showSnackBar(\r\n-        const SnackBar(content: Text(\"Registration successful!\")),\r\n+        const SnackBar(content: Text('Registration successful!')),\r\n       );\r\n \r\n-      // Navigate to home\r\n       Navigator.pushReplacementNamed(\r\n         context,\r\n         '/home',\r\n-        arguments: _auth.currentUser?.uid,\r\n+        arguments: userCredential.user?.uid,\r\n       );\r\n     } on FirebaseAuthException catch (e) {\r\n-      String errorMessage = _getErrorMessage(e);\r\n       if (!mounted) return;\r\n \r\n       ScaffoldMessenger.of(context).showSnackBar(\r\n-        SnackBar(content: Text(errorMessage)),\r\n+        SnackBar(content: Text(_getErrorMessage(e))),\r\n       );\r\n     } catch (e) {\r\n       if (!mounted) return;\r\n \r\n@@ -70,8 +67,9 @@\n       }\r\n     }\r\n   }\r\n \r\n+\r\n   String _getErrorMessage(FirebaseAuthException e) {\r\n     switch (e.code) {\r\n       case 'email-already-in-use':\r\n         return 'This email is already registered';\r\n"
                }
            ],
            "date": 1733503015772,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\n\r\nclass SignupScreen extends StatefulWidget {\r\n  const SignupScreen({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  State<SignupScreen> createState() => _SignupScreenState();\r\n}\r\n\r\nclass _SignupScreenState extends State<SignupScreen> {\r\n  final _nameController = TextEditingController();\r\n  final _emailController = TextEditingController();\r\n  final _passwordController = TextEditingController();\r\n  final _locationController = TextEditingController();\r\n  final _formKey = GlobalKey<FormState>();\r\n\r\n  final FirebaseAuth _auth = FirebaseAuth.instance; // Firebase Auth instance\r\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance; // Firestore instance\r\n\r\n  bool _isLoading = false;\r\n\r\nFuture<void> _registerUser() async {\r\n  setState(() {\r\n    _isLoading = true;\r\n  });\r\n\r\n  try {\r\n    // Sanitize inputs\r\n    final String sanitizedName = _nameController.text.trim();\r\n    final String sanitizedEmail = _emailController.text.trim().toLowerCase();\r\n    final String sanitizedLocation = _locationController.text.trim();\r\n\r\n    // Validate email format\r\n    if (!RegExp(r'^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\\.[a-zA-Z]+').hasMatch(sanitizedEmail)) {\r\n      throw Exception('Invalid email format');\r\n    }\r\n\r\n    // Create user with email and password\r\n    UserCredential userCredential = await _auth.createUserWithEmailAndPassword(\r\n      email: sanitizedEmail,\r\n      password: _passwordController.text, // Password shouldn't be trimmed\r\n    );\r\n\r\n    // Save additional user information to Firestore\r\n    User? user = userCredential.user;\r\n    if (user != null) {\r\n      await _firestore.collection('users').doc(user.uid).set({\r\n        'uid': user.uid,\r\n        'name': sanitizedName,\r\n        'email': sanitizedEmail,\r\n        'location': sanitizedLocation,\r\n        'created_at': FieldValue.serverTimestamp(),\r\n      });\r\n\r\n      // Update display name in Firebase Auth\r\n      await user.updateDisplayName(sanitizedName);\r\n\r\n      ScaffoldMessenger.of(context).showSnackBar(\r\n        const SnackBar(content: Text(\"Registration successful!\")),\r\n      );\r\n\r\n      // Navigate to home screen\r\n      Navigator.pushReplacementNamed(context, '/home', arguments: user.uid);\r\n    }\r\n  } on FirebaseAuthException catch (e) {\r\n    String errorMessage = \"Registration failed.\";\r\n    switch (e.code) {\r\n      case 'email-already-in-use':\r\n        errorMessage = \"This email is already registered.\";\r\n        break;\r\n      case 'weak-password':\r\n        errorMessage = \"Password should be at least 6 characters.\";\r\n        break;\r\n      case 'invalid-email':\r\n        errorMessage = \"Please enter a valid email address.\";\r\n        break;\r\n      default:\r\n        errorMessage = \"Registration error: ${e.message}\";\r\n    }\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(content: Text(errorMessage)),\r\n    );\r\n  } catch (e) {\r\n    print('Registration error details: $e'); // For debugging\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(content: Text(\"Registration error: ${e.toString()}\")),\r\n    );\r\n  } finally {\r\n    setState(() {\r\n      _isLoading = false;\r\n    });\r\n  }\r\n}\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text(\"Sign Up\"),\r\n      ),\r\n      body: Padding(\r\n        padding: const EdgeInsets.all(16.0),\r\n        child: Form(\r\n          key: _formKey,\r\n          child: SingleChildScrollView(\r\n            child: Column(\r\n              children: [\r\n                TextFormField(\r\n                  controller: _nameController,\r\n                  decoration: const InputDecoration(labelText: \"Name\"),\r\n                  validator: (value) {\r\n                    if (value == null || value.isEmpty) {\r\n                      return \"Please enter your name\";\r\n                    }\r\n                    return null;\r\n                  },\r\n                ),\r\n                const SizedBox(height: 16),\r\n                TextFormField(\r\n                  controller: _emailController,\r\n                  decoration: const InputDecoration(labelText: \"Email\"),\r\n                  keyboardType: TextInputType.emailAddress,\r\n                  validator: (value) {\r\n                    if (value == null || value.isEmpty) {\r\n                      return \"Please enter your email\";\r\n                    } else if (!RegExp(r'\\S+@\\S+\\.\\S+').hasMatch(value)) {\r\n                      return \"Enter a valid email\";\r\n                    }\r\n                    return null;\r\n                  },\r\n                ),\r\n                const SizedBox(height: 16),\r\n                TextFormField(\r\n                  controller: _passwordController,\r\n                  decoration: const InputDecoration(labelText: \"Password\"),\r\n                  obscureText: true,\r\n                  validator: (value) {\r\n                    if (value == null || value.isEmpty) {\r\n                      return \"Please enter your password\";\r\n                    } else if (value.length < 6) {\r\n                      return \"Password must be at least 6 characters\";\r\n                    }\r\n                    return null;\r\n                  },\r\n                ),\r\n                const SizedBox(height: 16),\r\n                TextFormField(\r\n                  controller: _locationController,\r\n                  decoration: const InputDecoration(labelText: \"Location\"),\r\n                  validator: (value) {\r\n                    if (value == null || value.isEmpty) {\r\n                      return \"Please enter your location\";\r\n                    }\r\n                    return null;\r\n                  },\r\n                ),\r\n                const SizedBox(height: 24),\r\n                _isLoading\r\n                    ? const CircularProgressIndicator()\r\n                    : ElevatedButton(\r\n                  onPressed: () async {\r\n                    if (_formKey.currentState!.validate()) {\r\n                      await _registerUser();\r\n                    }\r\n                  },\r\n                  child: const Text(\"Sign Up\"),\r\n                ),\r\n              ],\r\n            ),\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @override\r\n  void dispose() {\r\n    _nameController.dispose();\r\n    _emailController.dispose();\r\n    _passwordController.dispose();\r\n    _locationController.dispose();\r\n    super.dispose();\r\n  }\r\n}\r\n"
        }
    ]
}