{
    "sourceFile": "lib/services/auth_service",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1733503284922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733504090681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n+// lib/services/auth_service.dart\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n import 'package:cloud_firestore/cloud_firestore.dart';\r\n-import 'package:flutter/foundation.dart';\r\n+import '../models/user_model.dart';\r\n \r\n class AuthService {\r\n   final FirebaseAuth _auth = FirebaseAuth.instance;\r\n   final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n@@ -12,43 +13,36 @@\n     required String password,\r\n     required String location,\r\n   }) async {\r\n     try {\r\n-      // Validate and sanitize inputs\r\n-      final String sanitizedEmail = email.trim().toLowerCase();\r\n-      final String sanitizedName = name.trim();\r\n-      final String sanitizedLocation = location.trim();\r\n-\r\n-      // Create user with email and password\r\n+      // Create the user with email and password\r\n       final userCredential = await _auth.createUserWithEmailAndPassword(\r\n-        email: sanitizedEmail,\r\n+        email: email.trim(),\r\n         password: password,\r\n       );\r\n \r\n       if (userCredential.user != null) {\r\n-        // Create user document\r\n-        await _firestore.collection('users').doc(userCredential.user!.uid).set({\r\n-          'uid': userCredential.user!.uid,\r\n-          'name': sanitizedName,\r\n-          'email': sanitizedEmail,\r\n-          'location': sanitizedLocation,\r\n-          'created_at': FieldValue.serverTimestamp(),\r\n-        });\r\n+        // Create UserModel instance\r\n+        final userModel = UserModel(\r\n+          uid: userCredential.user!.uid,\r\n+          name: name.trim(),\r\n+          email: email.trim(),\r\n+          location: location.trim(),\r\n+        );\r\n \r\n-        // Update user profile\r\n-        await userCredential.user!.updateDisplayName(sanitizedName);\r\n+        // Save user data to Firestore\r\n+        await _firestore\r\n+            .collection('users')\r\n+            .doc(userCredential.user!.uid)\r\n+            .set(userModel.toMap());\r\n+\r\n+        // Update display name in Firebase Auth\r\n\\ No newline at end of file\n+        await userCredential.user!.updateDisplayName(name.trim());\r\n       }\r\n \r\n       return userCredential;\r\n-    } on FirebaseAuthException catch (e) {\r\n-      if (kDebugMode) {\r\n-        print('Firebase Auth Error: ${e.code} - ${e.message}');\r\n-      }\r\n+    } catch (e) {\r\n+      print('Error during sign up: $e');\r\n       rethrow;\r\n-    } catch (e) {\r\n-      if (kDebugMode) {\r\n-        print('Unexpected Error: $e');\r\n-      }\r\n-      throw Exception('Failed to register user: $e');\r\n     }\r\n   }\r\n-}\n+}\r\n"
                }
            ],
            "date": 1733503284922,
            "name": "Commit-0",
            "content": "import 'package:firebase_auth/firebase_auth.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'package:flutter/foundation.dart';\r\n\r\nclass AuthService {\r\n  final FirebaseAuth _auth = FirebaseAuth.instance;\r\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\r\n\r\n  Future<UserCredential> signUp({\r\n    required String name,\r\n    required String email,\r\n    required String password,\r\n    required String location,\r\n  }) async {\r\n    try {\r\n      // Validate and sanitize inputs\r\n      final String sanitizedEmail = email.trim().toLowerCase();\r\n      final String sanitizedName = name.trim();\r\n      final String sanitizedLocation = location.trim();\r\n\r\n      // Create user with email and password\r\n      final userCredential = await _auth.createUserWithEmailAndPassword(\r\n        email: sanitizedEmail,\r\n        password: password,\r\n      );\r\n\r\n      if (userCredential.user != null) {\r\n        // Create user document\r\n        await _firestore.collection('users').doc(userCredential.user!.uid).set({\r\n          'uid': userCredential.user!.uid,\r\n          'name': sanitizedName,\r\n          'email': sanitizedEmail,\r\n          'location': sanitizedLocation,\r\n          'created_at': FieldValue.serverTimestamp(),\r\n        });\r\n\r\n        // Update user profile\r\n        await userCredential.user!.updateDisplayName(sanitizedName);\r\n      }\r\n\r\n      return userCredential;\r\n    } on FirebaseAuthException catch (e) {\r\n      if (kDebugMode) {\r\n        print('Firebase Auth Error: ${e.code} - ${e.message}');\r\n      }\r\n      rethrow;\r\n    } catch (e) {\r\n      if (kDebugMode) {\r\n        print('Unexpected Error: $e');\r\n      }\r\n      throw Exception('Failed to register user: $e');\r\n    }\r\n  }\r\n}"
        }
    ]
}