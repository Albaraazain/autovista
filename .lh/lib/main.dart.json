{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1733501230013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733501487165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     return MaterialApp(\r\n       debugShowCheckedModeBanner: false,\r\n       title: 'AutoVista',\r\n       theme: AppTheme.lightTheme,\r\n-      home: const AuthWrapper(), // Use AuthWrapper to determine the initial screen\r\n+      home: const AuthWrapper(),\r\n       onGenerateRoute: (RouteSettings settings) {\r\n         switch (settings.name) {\r\n           case '/login':\r\n             return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n"
                },
                {
                    "date": 1733502637791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import 'package:flutter/material.dart';\r\n-import 'package:firebase_core/firebase_core.dart';\r\n+// import 'package:firebase_core/firebase_core.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n \r\n+import 'config/firebase_initialize.dart';\r\n+\r\n import 'screens/login_screen.dart';\r\n import 'screens/signup_screen.dart';\r\n import 'screens/home_screen.dart';\r\n import 'screens/view_vehicle_screen.dart';\r\n@@ -10,14 +12,13 @@\n \r\n void main() async {\r\n   WidgetsFlutterBinding.ensureInitialized();\r\n   try {\r\n-    await Firebase.initializeApp(); // Initialize Firebase\r\n+    await FirebaseInitialize.init();\r\n     runApp(const AutoVistaApp());\r\n   } catch (e) {\r\n-    // Use a logging framework instead of print\r\n-    debugPrint(\"Firebase Initialization Error: $e\");\r\n-    runApp(const ErrorApp(message: \"Failed to initialize Firebase.\"));\r\n+    print('Failed to initialize Firebase: $e');\r\n+    runApp(ErrorApp(message: 'Failed to initialize Firebase: $e'));\r\n   }\r\n }\r\n \r\n class AutoVistaApp extends StatelessWidget {\r\n"
                },
                {
                    "date": 1733504786455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:autovista/screens/profile_screen.dart';\r\n import 'package:flutter/material.dart';\r\n // import 'package:firebase_core/firebase_core.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n \r\n@@ -34,26 +35,70 @@\n       onGenerateRoute: (RouteSettings settings) {\r\n         switch (settings.name) {\r\n           case '/login':\r\n             return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n+\r\n           case '/signup':\r\n             return MaterialPageRoute(builder: (_) => const SignupScreen());\r\n+\r\n           case '/home':\r\n             final String? userId = settings.arguments as String?;\r\n             if (userId != null) {\r\n-              return MaterialPageRoute(builder: (_) => HomeScreen(userId: userId));\r\n+              return MaterialPageRoute(\r\n+                  builder: (_) => HomeScreen(userId: userId));\r\n             }\r\n             return _errorRoute(\"Missing or invalid 'userId' for HomeScreen\");\r\n+\r\n           case '/viewVehicle':\r\n-            final Map<String, dynamic>? args = settings.arguments as Map<String, dynamic>?;\r\n-            if (args != null && args['userId'] is String) {\r\n-              final String userId = args['userId'] as String;\r\n-              final Map<String, dynamic>? vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n+            // Handle both String and Map arguments\r\n+            String? userId;\r\n+            Map<String, dynamic>? vehicleData;\r\n+\r\n+            if (settings.arguments is String) {\r\n+              userId = settings.arguments as String;\r\n+            } else if (settings.arguments is Map<String, dynamic>) {\r\n+              final args = settings.arguments as Map<String, dynamic>;\r\n+              userId = args['userId'] as String?;\r\n+              vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n+            }\r\n+            if (userId != null) {\r\n               return MaterialPageRoute(\r\n-                builder: (_) => ViewVehicleScreen(userId: userId, vehicleData: vehicleData),\r\n+                builder: (_) => ViewVehicleScreen(\r\n+                  userId: userId!,\r\n+                  vehicleData: vehicleData,\r\n+                ),\r\n               );\r\n             }\r\n-            return _errorRoute(\"Missing or invalid arguments for ViewVehicleScreen\");\r\n+            return _errorRoute(\r\n+                \"Missing or invalid arguments for ViewVehicleScreen\");\r\n+\r\n+          case '/profile':\r\n+            final String? userId = settings.arguments as String?;\r\n+            if (userId != null) {\r\n+              return MaterialPageRoute(builder: (_) => ProfileScreen());\r\n+            }\r\n+            return _errorRoute(\"Missing or invalid 'userId' for ProfileScreen\");\r\n+\r\n+          case '/viewDocuments':\r\n+            return MaterialPageRoute(\r\n+              builder: (_) => Scaffold(\r\n+                appBar: AppBar(title: const Text('Documents')),\r\n+                body: const Center(\r\n+                  child: Text('Documents feature coming soon!'),\r\n+                ),\r\n+              ),\r\n+            );\r\n+\r\n+          case '/eventScreen':\r\n+            return MaterialPageRoute(\r\n+              builder: (_) => Scaffold(\r\n+                appBar: AppBar(title: const Text('Events')),\r\n+                body: const Center(\r\n+                  child: Text('Event planning feature coming soon!'),\r\n+                ),\r\n+              ),\r\n+            );\r\n+\r\n           default:\r\n             return _errorRoute(\"Unknown route: ${settings.name}\");\r\n         }\r\n       },\r\n@@ -81,9 +126,10 @@\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return StreamBuilder<User?>(\r\n-      stream: FirebaseAuth.instance.authStateChanges(), // Listen to auth state changes\r\n+      stream: FirebaseAuth.instance\r\n+          .authStateChanges(), // Listen to auth state changes\r\n       builder: (BuildContext context, AsyncSnapshot<User?> snapshot) {\r\n         if (snapshot.connectionState == ConnectionState.waiting) {\r\n           return const Scaffold(\r\n             body: Center(\r\n@@ -101,9 +147,10 @@\n             ),\r\n           );\r\n         } else if (snapshot.hasData) {\r\n           // If user is logged in, navigate to HomeScreen\r\n-          return HomeScreen(userId: snapshot.data!.uid); // Pass the Firebase UID\r\n+          return HomeScreen(\r\n+              userId: snapshot.data!.uid); // Pass the Firebase UID\r\n         } else {\r\n           // If user is not logged in, navigate to LoginScreen\r\n           return const LoginScreen();\r\n         }\r\n"
                },
                {
                    "date": 1733504795595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+import 'package:autovista/screens/profile_screen.dart';\r\n+import 'package:flutter/material.dart';\r\n+// import 'package:firebase_core/firebase_core.dart';\r\n+import 'package:firebase_auth/firebase_auth.dart';\r\n+\r\n+import 'config/firebase_initialize.dart';\r\n+\r\n+import 'screens/login_screen.dart';\r\n+import 'screens/signup_screen.dart';\r\n+import 'screens/home_screen.dart';\r\n+import 'screens/view_vehicle_screen.dart';\r\n+import 'theme.dart';\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  try {\r\n+    await FirebaseInitialize.init();\r\n+    runApp(const AutoVistaApp());\r\n+  } catch (e) {\r\n+    print('Failed to initialize Firebase: $e');\r\n+    runApp(ErrorApp(message: 'Failed to initialize Firebase: $e'));\r\n+  }\r\n+}\r\n+\r\n+class AutoVistaApp extends StatelessWidget {\r\n+  const AutoVistaApp({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return MaterialApp(\r\n+      debugShowCheckedModeBanner: false,\r\n+      title: 'AutoVista',\r\n+      theme: AppTheme.lightTheme,\r\n+      home: const AuthWrapper(),\r\n+      onGenerateRoute: (RouteSettings settings) {\r\n+        switch (settings.name) {\r\n+          case '/login':\r\n+            return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n+\r\n+          case '/signup':\r\n+            return MaterialPageRoute(builder: (_) => const SignupScreen());\r\n+\r\n+          case '/home':\r\n+            final String? userId = settings.arguments as String?;\r\n+            if (userId != null) {\r\n+              return MaterialPageRoute(\r\n+                  builder: (_) => HomeScreen(userId: userId));\r\n+            }\r\n+            return _errorRoute(\"Missing or invalid 'userId' for HomeScreen\");\r\n+\r\n+          case '/viewVehicle':\r\n+            // Handle both String and Map arguments\r\n+            String? userId;\r\n+            Map<String, dynamic>? vehicleData;\r\n+\r\n+            if (settings.arguments is String) {\r\n+              userId = settings.arguments as String;\r\n+            } else if (settings.arguments is Map<String, dynamic>) {\r\n+              final args = settings.arguments as Map<String, dynamic>;\r\n+              userId = args['userId'] as String?;\r\n+              vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n+            }\r\n+            if (userId != null) {\r\n+              return MaterialPageRoute(\r\n+                builder: (_) => ViewVehicleScreen(\r\n+                  userId: userId!,\r\n+                  vehicleData: vehicleData,\r\n+                ),\r\n+              );\r\n+            }\r\n+            return _errorRoute(\r\n+                \"Missing or invalid arguments for ViewVehicleScreen\");\r\n+\r\n+          case '/profile':\r\n+            final String? userId = settings.arguments as String?;\r\n+            if (userId != null) {\r\n+              return MaterialPageRoute(builder: (_) => ProfileScreen());\r\n+            }\r\n+            return _errorRoute(\"Missing or invalid 'userId' for ProfileScreen\");\r\n+\r\n+          case '/viewDocuments':\r\n+            return MaterialPageRoute(\r\n+              builder: (_) => Scaffold(\r\n+                appBar: AppBar(title: const Text('Documents')),\r\n+                body: const Center(\r\n+                  child: Text('Documents feature coming soon!'),\r\n+                ),\r\n+              ),\r\n+            );\r\n+\r\n+          case '/eventScreen':\r\n+            return MaterialPageRoute(\r\n+              builder: (_) => Scaffold(\r\n+                appBar: AppBar(title: const Text('Events')),\r\n+                body: const Center(\r\n+                  child: Text('Event planning feature coming soon!'),\r\n+                ),\r\n+              ),\r\n+            );\r\n+\r\n+          default:\r\n+            return _errorRoute(\"Unknown route: ${settings.name}\");\r\n+        }\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  MaterialPageRoute _errorRoute(String message) {\r\n+    return MaterialPageRoute(\r\n+      builder: (_) => Scaffold(\r\n+        appBar: AppBar(title: const Text(\"Error\")),\r\n+        body: Center(\r\n+          child: Text(\r\n+            message,\r\n+            style: const TextStyle(fontSize: 16, color: Colors.red),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class AuthWrapper extends StatelessWidget {\r\n+  const AuthWrapper({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return StreamBuilder<User?>(\r\n+      stream: FirebaseAuth.instance\r\n+          .authStateChanges(), // Listen to auth state changes\r\n+      builder: (BuildContext context, AsyncSnapshot<User?> snapshot) {\r\n+        if (snapshot.connectionState == ConnectionState.waiting) {\r\n+          return const Scaffold(\r\n+            body: Center(\r\n+              child: CircularProgressIndicator(), // Show a loading spinner\r\n+            ),\r\n+          );\r\n+        } else if (snapshot.hasError) {\r\n+          return Scaffold(\r\n+            appBar: AppBar(title: const Text(\"Error\")),\r\n+            body: Center(\r\n+              child: Text(\r\n+                \"An error occurred: ${snapshot.error}\",\r\n+                style: const TextStyle(fontSize: 18, color: Colors.red),\r\n+              ),\r\n+            ),\r\n+          );\r\n+        } else if (snapshot.hasData) {\r\n+          // If user is logged in, navigate to HomeScreen\r\n+          return HomeScreen(\r\n+              userId: snapshot.data!.uid); // Pass the Firebase UID\r\n+        } else {\r\n+          // If user is not logged in, navigate to LoginScreen\r\n+          return const LoginScreen();\r\n+        }\r\n+      },\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class ErrorApp extends StatelessWidget {\r\n+  final String message;\r\n+\r\n+  const ErrorApp({super.key, required this.message});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return MaterialApp(\r\n+      debugShowCheckedModeBanner: false,\r\n+      home: Scaffold(\r\n+        appBar: AppBar(title: const Text(\"Error\")),\r\n+        body: Center(\r\n+          child: Text(\r\n+            message,\r\n+            style: const TextStyle(fontSize: 18, color: Colors.red),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1733501230012,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:firebase_core/firebase_core.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\n\r\nimport 'screens/login_screen.dart';\r\nimport 'screens/signup_screen.dart';\r\nimport 'screens/home_screen.dart';\r\nimport 'screens/view_vehicle_screen.dart';\r\nimport 'theme.dart';\r\n\r\nvoid main() async {\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n  try {\r\n    await Firebase.initializeApp(); // Initialize Firebase\r\n    runApp(const AutoVistaApp());\r\n  } catch (e) {\r\n    // Use a logging framework instead of print\r\n    debugPrint(\"Firebase Initialization Error: $e\");\r\n    runApp(const ErrorApp(message: \"Failed to initialize Firebase.\"));\r\n  }\r\n}\r\n\r\nclass AutoVistaApp extends StatelessWidget {\r\n  const AutoVistaApp({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      title: 'AutoVista',\r\n      theme: AppTheme.lightTheme,\r\n      home: const AuthWrapper(), // Use AuthWrapper to determine the initial screen\r\n      onGenerateRoute: (RouteSettings settings) {\r\n        switch (settings.name) {\r\n          case '/login':\r\n            return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n          case '/signup':\r\n            return MaterialPageRoute(builder: (_) => const SignupScreen());\r\n          case '/home':\r\n            final String? userId = settings.arguments as String?;\r\n            if (userId != null) {\r\n              return MaterialPageRoute(builder: (_) => HomeScreen(userId: userId));\r\n            }\r\n            return _errorRoute(\"Missing or invalid 'userId' for HomeScreen\");\r\n          case '/viewVehicle':\r\n            final Map<String, dynamic>? args = settings.arguments as Map<String, dynamic>?;\r\n            if (args != null && args['userId'] is String) {\r\n              final String userId = args['userId'] as String;\r\n              final Map<String, dynamic>? vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n              return MaterialPageRoute(\r\n                builder: (_) => ViewVehicleScreen(userId: userId, vehicleData: vehicleData),\r\n              );\r\n            }\r\n            return _errorRoute(\"Missing or invalid arguments for ViewVehicleScreen\");\r\n          default:\r\n            return _errorRoute(\"Unknown route: ${settings.name}\");\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  MaterialPageRoute _errorRoute(String message) {\r\n    return MaterialPageRoute(\r\n      builder: (_) => Scaffold(\r\n        appBar: AppBar(title: const Text(\"Error\")),\r\n        body: Center(\r\n          child: Text(\r\n            message,\r\n            style: const TextStyle(fontSize: 16, color: Colors.red),\r\n            textAlign: TextAlign.center,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass AuthWrapper extends StatelessWidget {\r\n  const AuthWrapper({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return StreamBuilder<User?>(\r\n      stream: FirebaseAuth.instance.authStateChanges(), // Listen to auth state changes\r\n      builder: (BuildContext context, AsyncSnapshot<User?> snapshot) {\r\n        if (snapshot.connectionState == ConnectionState.waiting) {\r\n          return const Scaffold(\r\n            body: Center(\r\n              child: CircularProgressIndicator(), // Show a loading spinner\r\n            ),\r\n          );\r\n        } else if (snapshot.hasError) {\r\n          return Scaffold(\r\n            appBar: AppBar(title: const Text(\"Error\")),\r\n            body: Center(\r\n              child: Text(\r\n                \"An error occurred: ${snapshot.error}\",\r\n                style: const TextStyle(fontSize: 18, color: Colors.red),\r\n              ),\r\n            ),\r\n          );\r\n        } else if (snapshot.hasData) {\r\n          // If user is logged in, navigate to HomeScreen\r\n          return HomeScreen(userId: snapshot.data!.uid); // Pass the Firebase UID\r\n        } else {\r\n          // If user is not logged in, navigate to LoginScreen\r\n          return const LoginScreen();\r\n        }\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nclass ErrorApp extends StatelessWidget {\r\n  final String message;\r\n\r\n  const ErrorApp({super.key, required this.message});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      home: Scaffold(\r\n        appBar: AppBar(title: const Text(\"Error\")),\r\n        body: Center(\r\n          child: Text(\r\n            message,\r\n            style: const TextStyle(fontSize: 18, color: Colors.red),\r\n            textAlign: TextAlign.center,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}