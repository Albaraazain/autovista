{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1733501230013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733501487165,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     return MaterialApp(\r\n       debugShowCheckedModeBanner: false,\r\n       title: 'AutoVista',\r\n       theme: AppTheme.lightTheme,\r\n-      home: const AuthWrapper(), // Use AuthWrapper to determine the initial screen\r\n+      home: const AuthWrapper(),\r\n       onGenerateRoute: (RouteSettings settings) {\r\n         switch (settings.name) {\r\n           case '/login':\r\n             return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n"
                },
                {
                    "date": 1733502637791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n import 'package:flutter/material.dart';\r\n-import 'package:firebase_core/firebase_core.dart';\r\n+// import 'package:firebase_core/firebase_core.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n \r\n+import 'config/firebase_initialize.dart';\r\n+\r\n import 'screens/login_screen.dart';\r\n import 'screens/signup_screen.dart';\r\n import 'screens/home_screen.dart';\r\n import 'screens/view_vehicle_screen.dart';\r\n@@ -10,14 +12,13 @@\n \r\n void main() async {\r\n   WidgetsFlutterBinding.ensureInitialized();\r\n   try {\r\n-    await Firebase.initializeApp(); // Initialize Firebase\r\n+    await FirebaseInitialize.init();\r\n     runApp(const AutoVistaApp());\r\n   } catch (e) {\r\n-    // Use a logging framework instead of print\r\n-    debugPrint(\"Firebase Initialization Error: $e\");\r\n-    runApp(const ErrorApp(message: \"Failed to initialize Firebase.\"));\r\n+    print('Failed to initialize Firebase: $e');\r\n+    runApp(ErrorApp(message: 'Failed to initialize Firebase: $e'));\r\n   }\r\n }\r\n \r\n class AutoVistaApp extends StatelessWidget {\r\n"
                },
                {
                    "date": 1733504786455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,5 @@\n+import 'package:autovista/screens/profile_screen.dart';\r\n import 'package:flutter/material.dart';\r\n // import 'package:firebase_core/firebase_core.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n \r\n@@ -34,26 +35,70 @@\n       onGenerateRoute: (RouteSettings settings) {\r\n         switch (settings.name) {\r\n           case '/login':\r\n             return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n+\r\n           case '/signup':\r\n             return MaterialPageRoute(builder: (_) => const SignupScreen());\r\n+\r\n           case '/home':\r\n             final String? userId = settings.arguments as String?;\r\n             if (userId != null) {\r\n-              return MaterialPageRoute(builder: (_) => HomeScreen(userId: userId));\r\n+              return MaterialPageRoute(\r\n+                  builder: (_) => HomeScreen(userId: userId));\r\n             }\r\n             return _errorRoute(\"Missing or invalid 'userId' for HomeScreen\");\r\n+\r\n           case '/viewVehicle':\r\n-            final Map<String, dynamic>? args = settings.arguments as Map<String, dynamic>?;\r\n-            if (args != null && args['userId'] is String) {\r\n-              final String userId = args['userId'] as String;\r\n-              final Map<String, dynamic>? vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n+            // Handle both String and Map arguments\r\n+            String? userId;\r\n+            Map<String, dynamic>? vehicleData;\r\n+\r\n+            if (settings.arguments is String) {\r\n+              userId = settings.arguments as String;\r\n+            } else if (settings.arguments is Map<String, dynamic>) {\r\n+              final args = settings.arguments as Map<String, dynamic>;\r\n+              userId = args['userId'] as String?;\r\n+              vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n+            }\r\n+            if (userId != null) {\r\n               return MaterialPageRoute(\r\n-                builder: (_) => ViewVehicleScreen(userId: userId, vehicleData: vehicleData),\r\n+                builder: (_) => ViewVehicleScreen(\r\n+                  userId: userId!,\r\n+                  vehicleData: vehicleData,\r\n+                ),\r\n               );\r\n             }\r\n-            return _errorRoute(\"Missing or invalid arguments for ViewVehicleScreen\");\r\n+            return _errorRoute(\r\n+                \"Missing or invalid arguments for ViewVehicleScreen\");\r\n+\r\n+          case '/profile':\r\n+            final String? userId = settings.arguments as String?;\r\n+            if (userId != null) {\r\n+              return MaterialPageRoute(builder: (_) => ProfileScreen());\r\n+            }\r\n+            return _errorRoute(\"Missing or invalid 'userId' for ProfileScreen\");\r\n+\r\n+          case '/viewDocuments':\r\n+            return MaterialPageRoute(\r\n+              builder: (_) => Scaffold(\r\n+                appBar: AppBar(title: const Text('Documents')),\r\n+                body: const Center(\r\n+                  child: Text('Documents feature coming soon!'),\r\n+                ),\r\n+              ),\r\n+            );\r\n+\r\n+          case '/eventScreen':\r\n+            return MaterialPageRoute(\r\n+              builder: (_) => Scaffold(\r\n+                appBar: AppBar(title: const Text('Events')),\r\n+                body: const Center(\r\n+                  child: Text('Event planning feature coming soon!'),\r\n+                ),\r\n+              ),\r\n+            );\r\n+\r\n           default:\r\n             return _errorRoute(\"Unknown route: ${settings.name}\");\r\n         }\r\n       },\r\n@@ -81,9 +126,10 @@\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return StreamBuilder<User?>(\r\n-      stream: FirebaseAuth.instance.authStateChanges(), // Listen to auth state changes\r\n+      stream: FirebaseAuth.instance\r\n+          .authStateChanges(), // Listen to auth state changes\r\n       builder: (BuildContext context, AsyncSnapshot<User?> snapshot) {\r\n         if (snapshot.connectionState == ConnectionState.waiting) {\r\n           return const Scaffold(\r\n             body: Center(\r\n@@ -101,9 +147,10 @@\n             ),\r\n           );\r\n         } else if (snapshot.hasData) {\r\n           // If user is logged in, navigate to HomeScreen\r\n-          return HomeScreen(userId: snapshot.data!.uid); // Pass the Firebase UID\r\n+          return HomeScreen(\r\n+              userId: snapshot.data!.uid); // Pass the Firebase UID\r\n         } else {\r\n           // If user is not logged in, navigate to LoginScreen\r\n           return const LoginScreen();\r\n         }\r\n"
                },
                {
                    "date": 1733504795595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,183 @@\n+import 'package:autovista/screens/profile_screen.dart';\r\n+import 'package:flutter/material.dart';\r\n+// import 'package:firebase_core/firebase_core.dart';\r\n+import 'package:firebase_auth/firebase_auth.dart';\r\n+\r\n+import 'config/firebase_initialize.dart';\r\n+\r\n+import 'screens/login_screen.dart';\r\n+import 'screens/signup_screen.dart';\r\n+import 'screens/home_screen.dart';\r\n+import 'screens/view_vehicle_screen.dart';\r\n+import 'theme.dart';\r\n+\r\n+void main() async {\r\n+  WidgetsFlutterBinding.ensureInitialized();\r\n+  try {\r\n+    await FirebaseInitialize.init();\r\n+    runApp(const AutoVistaApp());\r\n+  } catch (e) {\r\n+    print('Failed to initialize Firebase: $e');\r\n+    runApp(ErrorApp(message: 'Failed to initialize Firebase: $e'));\r\n+  }\r\n+}\r\n+\r\n+class AutoVistaApp extends StatelessWidget {\r\n+  const AutoVistaApp({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return MaterialApp(\r\n+      debugShowCheckedModeBanner: false,\r\n+      title: 'AutoVista',\r\n+      theme: AppTheme.lightTheme,\r\n+      home: const AuthWrapper(),\r\n+      onGenerateRoute: (RouteSettings settings) {\r\n+        switch (settings.name) {\r\n+          case '/login':\r\n+            return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n+\r\n+          case '/signup':\r\n+            return MaterialPageRoute(builder: (_) => const SignupScreen());\r\n+\r\n+          case '/home':\r\n+            final String? userId = settings.arguments as String?;\r\n+            if (userId != null) {\r\n+              return MaterialPageRoute(\r\n+                  builder: (_) => HomeScreen(userId: userId));\r\n+            }\r\n+            return _errorRoute(\"Missing or invalid 'userId' for HomeScreen\");\r\n+\r\n+          case '/viewVehicle':\r\n+            // Handle both String and Map arguments\r\n+            String? userId;\r\n+            Map<String, dynamic>? vehicleData;\r\n+\r\n+            if (settings.arguments is String) {\r\n+              userId = settings.arguments as String;\r\n+            } else if (settings.arguments is Map<String, dynamic>) {\r\n+              final args = settings.arguments as Map<String, dynamic>;\r\n+              userId = args['userId'] as String?;\r\n+              vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n+            }\r\n+            if (userId != null) {\r\n+              return MaterialPageRoute(\r\n+                builder: (_) => ViewVehicleScreen(\r\n+                  userId: userId!,\r\n+                  vehicleData: vehicleData,\r\n+                ),\r\n+              );\r\n+            }\r\n+            return _errorRoute(\r\n+                \"Missing or invalid arguments for ViewVehicleScreen\");\r\n+\r\n+          case '/profile':\r\n+            final String? userId = settings.arguments as String?;\r\n+            if (userId != null) {\r\n+              return MaterialPageRoute(builder: (_) => ProfileScreen());\r\n+            }\r\n+            return _errorRoute(\"Missing or invalid 'userId' for ProfileScreen\");\r\n+\r\n+          case '/viewDocuments':\r\n+            return MaterialPageRoute(\r\n+              builder: (_) => Scaffold(\r\n+                appBar: AppBar(title: const Text('Documents')),\r\n+                body: const Center(\r\n+                  child: Text('Documents feature coming soon!'),\r\n+                ),\r\n+              ),\r\n+            );\r\n+\r\n+          case '/eventScreen':\r\n+            return MaterialPageRoute(\r\n+              builder: (_) => Scaffold(\r\n+                appBar: AppBar(title: const Text('Events')),\r\n+                body: const Center(\r\n+                  child: Text('Event planning feature coming soon!'),\r\n+                ),\r\n+              ),\r\n+            );\r\n+\r\n+          default:\r\n+            return _errorRoute(\"Unknown route: ${settings.name}\");\r\n+        }\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  MaterialPageRoute _errorRoute(String message) {\r\n+    return MaterialPageRoute(\r\n+      builder: (_) => Scaffold(\r\n+        appBar: AppBar(title: const Text(\"Error\")),\r\n+        body: Center(\r\n+          child: Text(\r\n+            message,\r\n+            style: const TextStyle(fontSize: 16, color: Colors.red),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class AuthWrapper extends StatelessWidget {\r\n+  const AuthWrapper({super.key});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return StreamBuilder<User?>(\r\n+      stream: FirebaseAuth.instance\r\n+          .authStateChanges(), // Listen to auth state changes\r\n+      builder: (BuildContext context, AsyncSnapshot<User?> snapshot) {\r\n+        if (snapshot.connectionState == ConnectionState.waiting) {\r\n+          return const Scaffold(\r\n+            body: Center(\r\n+              child: CircularProgressIndicator(), // Show a loading spinner\r\n+            ),\r\n+          );\r\n+        } else if (snapshot.hasError) {\r\n+          return Scaffold(\r\n+            appBar: AppBar(title: const Text(\"Error\")),\r\n+            body: Center(\r\n+              child: Text(\r\n+                \"An error occurred: ${snapshot.error}\",\r\n+                style: const TextStyle(fontSize: 18, color: Colors.red),\r\n+              ),\r\n+            ),\r\n+          );\r\n+        } else if (snapshot.hasData) {\r\n+          // If user is logged in, navigate to HomeScreen\r\n+          return HomeScreen(\r\n+              userId: snapshot.data!.uid); // Pass the Firebase UID\r\n+        } else {\r\n+          // If user is not logged in, navigate to LoginScreen\r\n+          return const LoginScreen();\r\n+        }\r\n+      },\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+class ErrorApp extends StatelessWidget {\r\n+  final String message;\r\n+\r\n+  const ErrorApp({super.key, required this.message});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return MaterialApp(\r\n+      debugShowCheckedModeBanner: false,\r\n+      home: Scaffold(\r\n+        appBar: AppBar(title: const Text(\"Error\")),\r\n+        body: Center(\r\n+          child: Text(\r\n+            message,\r\n+            style: const TextStyle(fontSize: 18, color: Colors.red),\r\n+            textAlign: TextAlign.center,\r\n+          ),\r\n+        ),\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1733506582086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,12 @@\n-import 'package:autovista/screens/profile_screen.dart';\r\n+// lib/main.dart\r\n import 'package:flutter/material.dart';\r\n-// import 'package:firebase_core/firebase_core.dart';\r\n+import 'package:provider/provider.dart';\r\n import 'package:firebase_auth/firebase_auth.dart';\r\n-\r\n import 'config/firebase_initialize.dart';\r\n-\r\n+import 'repositories/firebase/firebase_auth_repository.dart';\r\n+import 'repositories/interfaces/auth_repository.dart';\r\n+import 'providers/auth_provider.dart';\r\n import 'screens/login_screen.dart';\r\n import 'screens/signup_screen.dart';\r\n import 'screens/home_screen.dart';\r\n import 'screens/view_vehicle_screen.dart';\r\n@@ -26,83 +27,67 @@\n   const AutoVistaApp({super.key});\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    return MaterialApp(\r\n-      debugShowCheckedModeBanner: false,\r\n-      title: 'AutoVista',\r\n-      theme: AppTheme.lightTheme,\r\n-      home: const AuthWrapper(),\r\n-      onGenerateRoute: (RouteSettings settings) {\r\n-        switch (settings.name) {\r\n-          case '/login':\r\n-            return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n-\r\n-          case '/signup':\r\n-            return MaterialPageRoute(builder: (_) => const SignupScreen());\r\n-\r\n-          case '/home':\r\n-            final String? userId = settings.arguments as String?;\r\n-            if (userId != null) {\r\n+    return MultiProvider(\r\n+      providers: [\r\n+        // Provide the AuthRepository\r\n+        Provider<AuthRepository>(\r\n+          create: (_) => FirebaseAuthRepository(),\r\n+        ),\r\n+        // Provide the AuthProvider which uses AuthRepository\r\n+        ChangeNotifierProxyProvider<AuthRepository, AuthProvider>(\r\n+          create: (context) => AuthProvider(context.read<AuthRepository>()),\r\n+          update: (context, authRepository, previous) =>\r\n+            previous ?? AuthProvider(authRepository),\r\n+        ),\r\n+      ],\r\n+      child: MaterialApp(\r\n+        debugShowCheckedModeBanner: false,\r\n+        title: 'AutoVista',\r\n+        theme: AppTheme.lightTheme,\r\n+        home: const AuthWrapper(),\r\n+        onGenerateRoute: (RouteSettings settings) {\r\n+          switch (settings.name) {\r\n+            case '/login':\r\n+              return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n+            case '/signup':\r\n+              return MaterialPageRoute(builder: (_) => const SignupScreen());\r\n+            case '/home':\r\n+              final String? userId = settings.arguments as String?;\r\n+              if (userId != null) {\r\n+                return MaterialPageRoute(builder: (_) => HomeScreen(userId: userId));\r\n+              }\r\n+              return _errorRoute(\"Missing or invalid 'userId' for HomeScreen\");\r\n+            case '/viewVehicle':\r\n+              final Map<String, dynamic>? args = settings.arguments as Map<String, dynamic>?;\r\n+              if (args != null && args['userId'] is String) {\r\n+                final String userId = args['userId'] as String;\r\n+                final Map<String, dynamic>? vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n+                return MaterialPageRoute(\r\n+                  builder: (_) => ViewVehicleScreen(userId: userId, vehicleData: vehicleData),\r\n+                );\r\n+              }\r\n+              return _errorRoute(\"Missing or invalid arguments for ViewVehicleScreen\");\r\n+            case '/viewDocuments':\r\n               return MaterialPageRoute(\r\n-                  builder: (_) => HomeScreen(userId: userId));\r\n-            }\r\n-            return _errorRoute(\"Missing or invalid 'userId' for HomeScreen\");\r\n-\r\n-          case '/viewVehicle':\r\n-            // Handle both String and Map arguments\r\n-            String? userId;\r\n-            Map<String, dynamic>? vehicleData;\r\n-\r\n-            if (settings.arguments is String) {\r\n-              userId = settings.arguments as String;\r\n-            } else if (settings.arguments is Map<String, dynamic>) {\r\n-              final args = settings.arguments as Map<String, dynamic>;\r\n-              userId = args['userId'] as String?;\r\n-              vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n-            }\r\n-            if (userId != null) {\r\n+                builder: (_) => Scaffold(\r\n+                  appBar: AppBar(title: const Text('Documents')),\r\n+                  body: const Center(child: Text('Documents feature coming soon')),\r\n+                ),\r\n+              );\r\n+            case '/eventScreen':\r\n               return MaterialPageRoute(\r\n-                builder: (_) => ViewVehicleScreen(\r\n-                  userId: userId!,\r\n-                  vehicleData: vehicleData,\r\n+                builder: (_) => Scaffold(\r\n+                  appBar: AppBar(title: const Text('Events')),\r\n+                  body: const Center(child: Text('Events feature coming soon')),\r\n                 ),\r\n               );\r\n-            }\r\n-            return _errorRoute(\r\n-                \"Missing or invalid arguments for ViewVehicleScreen\");\r\n-\r\n-          case '/profile':\r\n-            final String? userId = settings.arguments as String?;\r\n-            if (userId != null) {\r\n-              return MaterialPageRoute(builder: (_) => ProfileScreen());\r\n-            }\r\n-            return _errorRoute(\"Missing or invalid 'userId' for ProfileScreen\");\r\n-\r\n-          case '/viewDocuments':\r\n-            return MaterialPageRoute(\r\n-              builder: (_) => Scaffold(\r\n-                appBar: AppBar(title: const Text('Documents')),\r\n-                body: const Center(\r\n-                  child: Text('Documents feature coming soon!'),\r\n-                ),\r\n-              ),\r\n-            );\r\n-\r\n-          case '/eventScreen':\r\n-            return MaterialPageRoute(\r\n-              builder: (_) => Scaffold(\r\n-                appBar: AppBar(title: const Text('Events')),\r\n-                body: const Center(\r\n-                  child: Text('Event planning feature coming soon!'),\r\n-                ),\r\n-              ),\r\n-            );\r\n-\r\n-          default:\r\n-            return _errorRoute(\"Unknown route: ${settings.name}\");\r\n-        }\r\n-      },\r\n+            default:\r\n+              return _errorRoute(\"Unknown route: ${settings.name}\");\r\n+          }\r\n+        },\r\n+      ),\r\n     );\r\n   }\r\n \r\n   MaterialPageRoute _errorRoute(String message) {\r\n@@ -125,224 +110,41 @@\n   const AuthWrapper({super.key});\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    return StreamBuilder<User?>(\r\n-      stream: FirebaseAuth.instance\r\n-          .authStateChanges(), // Listen to auth state changes\r\n-      builder: (BuildContext context, AsyncSnapshot<User?> snapshot) {\r\n-        if (snapshot.connectionState == ConnectionState.waiting) {\r\n-          return const Scaffold(\r\n-            body: Center(\r\n-              child: CircularProgressIndicator(), // Show a loading spinner\r\n-            ),\r\n-          );\r\n-        } else if (snapshot.hasError) {\r\n-          return Scaffold(\r\n-            appBar: AppBar(title: const Text(\"Error\")),\r\n-            body: Center(\r\n-              child: Text(\r\n-                \"An error occurred: ${snapshot.error}\",\r\n-                style: const TextStyle(fontSize: 18, color: Colors.red),\r\n-              ),\r\n-            ),\r\n-          );\r\n-        } else if (snapshot.hasData) {\r\n-          // If user is logged in, navigate to HomeScreen\r\n-          return HomeScreen(\r\n-              userId: snapshot.data!.uid); // Pass the Firebase UID\r\n-        } else {\r\n-          // If user is not logged in, navigate to LoginScreen\r\n-          return const LoginScreen();\r\n-        }\r\n-      },\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-class ErrorApp extends StatelessWidget {\r\n-  final String message;\r\n-\r\n-  const ErrorApp({super.key, required this.message});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return MaterialApp(\r\n-      debugShowCheckedModeBanner: false,\r\n-      home: Scaffold(\r\n-        appBar: AppBar(title: const Text(\"Error\")),\r\n-        body: Center(\r\n-          child: Text(\r\n-            message,\r\n-            style: const TextStyle(fontSize: 18, color: Colors.red),\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n-}\r\n-import 'package:autovista/screens/profile_screen.dart';\r\n-import 'package:flutter/material.dart';\r\n-// import 'package:firebase_core/firebase_core.dart';\r\n-import 'package:firebase_auth/firebase_auth.dart';\r\n-\r\n-import 'config/firebase_initialize.dart';\r\n-\r\n-import 'screens/login_screen.dart';\r\n-import 'screens/signup_screen.dart';\r\n-import 'screens/home_screen.dart';\r\n-import 'screens/view_vehicle_screen.dart';\r\n-import 'theme.dart';\r\n-\r\n-void main() async {\r\n-  WidgetsFlutterBinding.ensureInitialized();\r\n-  try {\r\n-    await FirebaseInitialize.init();\r\n-    runApp(const AutoVistaApp());\r\n-  } catch (e) {\r\n-    print('Failed to initialize Firebase: $e');\r\n-    runApp(ErrorApp(message: 'Failed to initialize Firebase: $e'));\r\n-  }\r\n-}\r\n-\r\n-class AutoVistaApp extends StatelessWidget {\r\n-  const AutoVistaApp({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return MaterialApp(\r\n-      debugShowCheckedModeBanner: false,\r\n-      title: 'AutoVista',\r\n-      theme: AppTheme.lightTheme,\r\n-      home: const AuthWrapper(),\r\n-      onGenerateRoute: (RouteSettings settings) {\r\n-        switch (settings.name) {\r\n-          case '/login':\r\n-            return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n-\r\n-          case '/signup':\r\n-            return MaterialPageRoute(builder: (_) => const SignupScreen());\r\n-\r\n-          case '/home':\r\n-            final String? userId = settings.arguments as String?;\r\n-            if (userId != null) {\r\n-              return MaterialPageRoute(\r\n-                  builder: (_) => HomeScreen(userId: userId));\r\n-            }\r\n-            return _errorRoute(\"Missing or invalid 'userId' for HomeScreen\");\r\n-\r\n-          case '/viewVehicle':\r\n-            // Handle both String and Map arguments\r\n-            String? userId;\r\n-            Map<String, dynamic>? vehicleData;\r\n-\r\n-            if (settings.arguments is String) {\r\n-              userId = settings.arguments as String;\r\n-            } else if (settings.arguments is Map<String, dynamic>) {\r\n-              final args = settings.arguments as Map<String, dynamic>;\r\n-              userId = args['userId'] as String?;\r\n-              vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n-            }\r\n-            if (userId != null) {\r\n-              return MaterialPageRoute(\r\n-                builder: (_) => ViewVehicleScreen(\r\n-                  userId: userId!,\r\n-                  vehicleData: vehicleData,\r\n+    return Consumer<AuthProvider>(\r\n+      builder: (context, authProvider, _) {\r\n+        return StreamBuilder<User?>(\r\n+          stream: authProvider.authStateChanges,\r\n+          builder: (context, snapshot) {\r\n+            if (snapshot.connectionState == ConnectionState.waiting) {\r\n+              return const Scaffold(\r\n+                body: Center(\r\n+                  child: CircularProgressIndicator(),\r\n                 ),\r\n               );\r\n+            } else if (snapshot.hasError) {\r\n+              return Scaffold(\r\n+                appBar: AppBar(title: const Text(\"Error\")),\r\n+                body: Center(\r\n+                  child: Text(\r\n+                    \"An error occurred: ${snapshot.error}\",\r\n+                    style: const TextStyle(fontSize: 18, color: Colors.red),\r\n+                  ),\r\n+                ),\r\n+              );\r\n+            } else if (snapshot.hasData) {\r\n+              return HomeScreen(userId: snapshot.data!.uid);\r\n+            } else {\r\n+              return const LoginScreen();\r\n             }\r\n-            return _errorRoute(\r\n-                \"Missing or invalid arguments for ViewVehicleScreen\");\r\n-\r\n-          case '/profile':\r\n-            final String? userId = settings.arguments as String?;\r\n-            if (userId != null) {\r\n-              return MaterialPageRoute(builder: (_) => ProfileScreen());\r\n-            }\r\n-            return _errorRoute(\"Missing or invalid 'userId' for ProfileScreen\");\r\n-\r\n-          case '/viewDocuments':\r\n-            return MaterialPageRoute(\r\n-              builder: (_) => Scaffold(\r\n-                appBar: AppBar(title: const Text('Documents')),\r\n-                body: const Center(\r\n-                  child: Text('Documents feature coming soon!'),\r\n-                ),\r\n-              ),\r\n-            );\r\n-\r\n-          case '/eventScreen':\r\n-            return MaterialPageRoute(\r\n-              builder: (_) => Scaffold(\r\n-                appBar: AppBar(title: const Text('Events')),\r\n-                body: const Center(\r\n-                  child: Text('Event planning feature coming soon!'),\r\n-                ),\r\n-              ),\r\n-            );\r\n-\r\n-          default:\r\n-            return _errorRoute(\"Unknown route: ${settings.name}\");\r\n-        }\r\n+          },\r\n+        );\r\n       },\r\n     );\r\n   }\r\n-\r\n-  MaterialPageRoute _errorRoute(String message) {\r\n-    return MaterialPageRoute(\r\n-      builder: (_) => Scaffold(\r\n-        appBar: AppBar(title: const Text(\"Error\")),\r\n-        body: Center(\r\n-          child: Text(\r\n-            message,\r\n-            style: const TextStyle(fontSize: 16, color: Colors.red),\r\n-            textAlign: TextAlign.center,\r\n-          ),\r\n-        ),\r\n-      ),\r\n-    );\r\n-  }\r\n }\r\n \r\n-class AuthWrapper extends StatelessWidget {\r\n-  const AuthWrapper({super.key});\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return StreamBuilder<User?>(\r\n-      stream: FirebaseAuth.instance\r\n-          .authStateChanges(), // Listen to auth state changes\r\n-      builder: (BuildContext context, AsyncSnapshot<User?> snapshot) {\r\n-        if (snapshot.connectionState == ConnectionState.waiting) {\r\n-          return const Scaffold(\r\n-            body: Center(\r\n-              child: CircularProgressIndicator(), // Show a loading spinner\r\n-            ),\r\n-          );\r\n-        } else if (snapshot.hasError) {\r\n-          return Scaffold(\r\n-            appBar: AppBar(title: const Text(\"Error\")),\r\n-            body: Center(\r\n-              child: Text(\r\n-                \"An error occurred: ${snapshot.error}\",\r\n-                style: const TextStyle(fontSize: 18, color: Colors.red),\r\n-              ),\r\n-            ),\r\n-          );\r\n-        } else if (snapshot.hasData) {\r\n-          // If user is logged in, navigate to HomeScreen\r\n-          return HomeScreen(\r\n-              userId: snapshot.data!.uid); // Pass the Firebase UID\r\n-        } else {\r\n-          // If user is not logged in, navigate to LoginScreen\r\n-          return const LoginScreen();\r\n-        }\r\n-      },\r\n-    );\r\n-  }\r\n-}\r\n-\r\n class ErrorApp extends StatelessWidget {\r\n   final String message;\r\n \r\n   const ErrorApp({super.key, required this.message});\r\n@@ -362,5 +164,5 @@\n         ),\r\n       ),\r\n     );\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733506638347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n import 'screens/signup_screen.dart';\r\n import 'screens/home_screen.dart';\r\n import 'screens/view_vehicle_screen.dart';\r\n import 'theme.dart';\r\n+import 'providers/auth_provider.dart';\r\n \r\n void main() async {\r\n   WidgetsFlutterBinding.ensureInitialized();\r\n   try {\r\n"
                },
                {
                    "date": 1733506681060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // lib/main.dart\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n-import 'package:firebase_auth/firebase_auth.dart';\r\n+import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;\r\n import 'config/firebase_initialize.dart';\r\n import 'repositories/firebase/firebase_auth_repository.dart';\r\n import 'repositories/interfaces/auth_repository.dart';\r\n import 'providers/auth_provider.dart';\r\n@@ -10,9 +10,8 @@\n import 'screens/signup_screen.dart';\r\n import 'screens/home_screen.dart';\r\n import 'screens/view_vehicle_screen.dart';\r\n import 'theme.dart';\r\n-import 'providers/auth_provider.dart';\r\n \r\n void main() async {\r\n   WidgetsFlutterBinding.ensureInitialized();\r\n   try {\r\n@@ -113,9 +112,9 @@\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Consumer<AuthProvider>(\r\n       builder: (context, authProvider, _) {\r\n-        return StreamBuilder<User?>(\r\n+        return StreamBuilder<firebase_auth.User?>(\r\n           stream: authProvider.authStateChanges,\r\n           builder: (context, snapshot) {\r\n             if (snapshot.connectionState == ConnectionState.waiting) {\r\n               return const Scaffold(\r\n"
                },
                {
                    "date": 1733507360704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,13 @@\n import 'package:provider/provider.dart';\r\n import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;\r\n import 'config/firebase_initialize.dart';\r\n import 'repositories/firebase/firebase_auth_repository.dart';\r\n+import 'repositories/firebase/firebase_user_repository.dart';  // Add this import\r\n import 'repositories/interfaces/auth_repository.dart';\r\n+import 'repositories/interfaces/user_repository.dart';  // Add this import\r\n import 'providers/auth_provider.dart';\r\n+import 'providers/user_provider.dart';  // Add this import\r\n import 'screens/login_screen.dart';\r\n import 'screens/signup_screen.dart';\r\n import 'screens/home_screen.dart';\r\n import 'screens/view_vehicle_screen.dart';\r\n@@ -29,18 +32,27 @@\n   @override\r\n   Widget build(BuildContext context) {\r\n     return MultiProvider(\r\n       providers: [\r\n-        // Provide the AuthRepository\r\n+        // Repositories\r\n         Provider<AuthRepository>(\r\n           create: (_) => FirebaseAuthRepository(),\r\n         ),\r\n-        // Provide the AuthProvider which uses AuthRepository\r\n+        Provider<UserRepository>(\r\n+          create: (_) => FirebaseUserRepository(),\r\n+        ),\r\n+\r\n+        // Providers\r\n         ChangeNotifierProxyProvider<AuthRepository, AuthProvider>(\r\n           create: (context) => AuthProvider(context.read<AuthRepository>()),\r\n           update: (context, authRepository, previous) =>\r\n             previous ?? AuthProvider(authRepository),\r\n         ),\r\n+        ChangeNotifierProxyProvider<UserRepository, UserProvider>(\r\n+          create: (context) => UserProvider(context.read<UserRepository>()),\r\n+          update: (context, userRepository, previous) =>\r\n+            previous ?? UserProvider(userRepository),\r\n+        ),\r\n       ],\r\n       child: MaterialApp(\r\n         debugShowCheckedModeBanner: false,\r\n         title: 'AutoVista',\r\n"
                },
                {
                    "date": 1733507962762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,13 @@\n import 'package:provider/provider.dart';\r\n import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;\r\n import 'config/firebase_initialize.dart';\r\n import 'repositories/firebase/firebase_auth_repository.dart';\r\n-import 'repositories/firebase/firebase_user_repository.dart';  // Add this import\r\n+import 'repositories/firebase/firebase_user_repository.dart'; // Add this import\r\n import 'repositories/interfaces/auth_repository.dart';\r\n-import 'repositories/interfaces/user_repository.dart';  // Add this import\r\n+import 'repositories/interfaces/user_repository.dart'; // Add this import\r\n import 'providers/auth_provider.dart';\r\n-import 'providers/user_provider.dart';  // Add this import\r\n+import 'providers/user_provider.dart'; // Add this import\r\n import 'screens/login_screen.dart';\r\n import 'screens/signup_screen.dart';\r\n import 'screens/home_screen.dart';\r\n import 'screens/view_vehicle_screen.dart';\r\n@@ -39,20 +39,29 @@\n         ),\r\n         Provider<UserRepository>(\r\n           create: (_) => FirebaseUserRepository(),\r\n         ),\r\n+        Provider<VehicleRepository>(\r\n+          create: (_) => FirebaseVehicleRepository(),\r\n+        ),\r\n \r\n         // Providers\r\n         ChangeNotifierProxyProvider<AuthRepository, AuthProvider>(\r\n           create: (context) => AuthProvider(context.read<AuthRepository>()),\r\n           update: (context, authRepository, previous) =>\r\n-            previous ?? AuthProvider(authRepository),\r\n+              previous ?? AuthProvider(authRepository),\r\n         ),\r\n         ChangeNotifierProxyProvider<UserRepository, UserProvider>(\r\n           create: (context) => UserProvider(context.read<UserRepository>()),\r\n           update: (context, userRepository, previous) =>\r\n-            previous ?? UserProvider(userRepository),\r\n+              previous ?? UserProvider(userRepository),\r\n         ),\r\n+        ChangeNotifierProxyProvider<VehicleRepository, VehicleProvider>(\r\n+          create: (context) =>\r\n+              VehicleProvider(context.read<VehicleRepository>()),\r\n+          update: (context, vehicleRepository, previous) =>\r\n+              previous ?? VehicleProvider(vehicleRepository),\r\n+        ),\r\n       ],\r\n       child: MaterialApp(\r\n         debugShowCheckedModeBanner: false,\r\n         title: 'AutoVista',\r\n@@ -66,26 +75,32 @@\n               return MaterialPageRoute(builder: (_) => const SignupScreen());\r\n             case '/home':\r\n               final String? userId = settings.arguments as String?;\r\n               if (userId != null) {\r\n-                return MaterialPageRoute(builder: (_) => HomeScreen(userId: userId));\r\n+                return MaterialPageRoute(\r\n+                    builder: (_) => HomeScreen(userId: userId));\r\n               }\r\n               return _errorRoute(\"Missing or invalid 'userId' for HomeScreen\");\r\n             case '/viewVehicle':\r\n-              final Map<String, dynamic>? args = settings.arguments as Map<String, dynamic>?;\r\n+              final Map<String, dynamic>? args =\r\n+                  settings.arguments as Map<String, dynamic>?;\r\n               if (args != null && args['userId'] is String) {\r\n                 final String userId = args['userId'] as String;\r\n-                final Map<String, dynamic>? vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n+                final Map<String, dynamic>? vehicleData =\r\n+                    args['vehicleData'] as Map<String, dynamic>?;\r\n                 return MaterialPageRoute(\r\n-                  builder: (_) => ViewVehicleScreen(userId: userId, vehicleData: vehicleData),\r\n+                  builder: (_) => ViewVehicleScreen(\r\n+                      userId: userId, vehicleData: vehicleData),\r\n                 );\r\n               }\r\n-              return _errorRoute(\"Missing or invalid arguments for ViewVehicleScreen\");\r\n+              return _errorRoute(\r\n+                  \"Missing or invalid arguments for ViewVehicleScreen\");\r\n             case '/viewDocuments':\r\n               return MaterialPageRoute(\r\n                 builder: (_) => Scaffold(\r\n                   appBar: AppBar(title: const Text('Documents')),\r\n-                  body: const Center(child: Text('Documents feature coming soon')),\r\n+                  body: const Center(\r\n+                      child: Text('Documents feature coming soon')),\r\n                 ),\r\n               );\r\n             case '/eventScreen':\r\n               return MaterialPageRoute(\r\n@@ -176,5 +191,5 @@\n         ),\r\n       ),\r\n     );\r\n   }\r\n-}\n\\ No newline at end of file\n+}\r\n"
                },
                {
                    "date": 1733507968769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n // lib/main.dart\r\n+import 'package:autovista/repositories/firebase/firebase_vehicle_repository.dart';\r\n+import 'package:autovista/repositories/interfaces/vehicle_repository.dart';\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;\r\n import 'config/firebase_initialize.dart';\r\n"
                }
            ],
            "date": 1733501230012,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:firebase_core/firebase_core.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\n\r\nimport 'screens/login_screen.dart';\r\nimport 'screens/signup_screen.dart';\r\nimport 'screens/home_screen.dart';\r\nimport 'screens/view_vehicle_screen.dart';\r\nimport 'theme.dart';\r\n\r\nvoid main() async {\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n  try {\r\n    await Firebase.initializeApp(); // Initialize Firebase\r\n    runApp(const AutoVistaApp());\r\n  } catch (e) {\r\n    // Use a logging framework instead of print\r\n    debugPrint(\"Firebase Initialization Error: $e\");\r\n    runApp(const ErrorApp(message: \"Failed to initialize Firebase.\"));\r\n  }\r\n}\r\n\r\nclass AutoVistaApp extends StatelessWidget {\r\n  const AutoVistaApp({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      title: 'AutoVista',\r\n      theme: AppTheme.lightTheme,\r\n      home: const AuthWrapper(), // Use AuthWrapper to determine the initial screen\r\n      onGenerateRoute: (RouteSettings settings) {\r\n        switch (settings.name) {\r\n          case '/login':\r\n            return MaterialPageRoute(builder: (_) => const LoginScreen());\r\n          case '/signup':\r\n            return MaterialPageRoute(builder: (_) => const SignupScreen());\r\n          case '/home':\r\n            final String? userId = settings.arguments as String?;\r\n            if (userId != null) {\r\n              return MaterialPageRoute(builder: (_) => HomeScreen(userId: userId));\r\n            }\r\n            return _errorRoute(\"Missing or invalid 'userId' for HomeScreen\");\r\n          case '/viewVehicle':\r\n            final Map<String, dynamic>? args = settings.arguments as Map<String, dynamic>?;\r\n            if (args != null && args['userId'] is String) {\r\n              final String userId = args['userId'] as String;\r\n              final Map<String, dynamic>? vehicleData = args['vehicleData'] as Map<String, dynamic>?;\r\n              return MaterialPageRoute(\r\n                builder: (_) => ViewVehicleScreen(userId: userId, vehicleData: vehicleData),\r\n              );\r\n            }\r\n            return _errorRoute(\"Missing or invalid arguments for ViewVehicleScreen\");\r\n          default:\r\n            return _errorRoute(\"Unknown route: ${settings.name}\");\r\n        }\r\n      },\r\n    );\r\n  }\r\n\r\n  MaterialPageRoute _errorRoute(String message) {\r\n    return MaterialPageRoute(\r\n      builder: (_) => Scaffold(\r\n        appBar: AppBar(title: const Text(\"Error\")),\r\n        body: Center(\r\n          child: Text(\r\n            message,\r\n            style: const TextStyle(fontSize: 16, color: Colors.red),\r\n            textAlign: TextAlign.center,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n\r\nclass AuthWrapper extends StatelessWidget {\r\n  const AuthWrapper({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return StreamBuilder<User?>(\r\n      stream: FirebaseAuth.instance.authStateChanges(), // Listen to auth state changes\r\n      builder: (BuildContext context, AsyncSnapshot<User?> snapshot) {\r\n        if (snapshot.connectionState == ConnectionState.waiting) {\r\n          return const Scaffold(\r\n            body: Center(\r\n              child: CircularProgressIndicator(), // Show a loading spinner\r\n            ),\r\n          );\r\n        } else if (snapshot.hasError) {\r\n          return Scaffold(\r\n            appBar: AppBar(title: const Text(\"Error\")),\r\n            body: Center(\r\n              child: Text(\r\n                \"An error occurred: ${snapshot.error}\",\r\n                style: const TextStyle(fontSize: 18, color: Colors.red),\r\n              ),\r\n            ),\r\n          );\r\n        } else if (snapshot.hasData) {\r\n          // If user is logged in, navigate to HomeScreen\r\n          return HomeScreen(userId: snapshot.data!.uid); // Pass the Firebase UID\r\n        } else {\r\n          // If user is not logged in, navigate to LoginScreen\r\n          return const LoginScreen();\r\n        }\r\n      },\r\n    );\r\n  }\r\n}\r\n\r\nclass ErrorApp extends StatelessWidget {\r\n  final String message;\r\n\r\n  const ErrorApp({super.key, required this.message});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      debugShowCheckedModeBanner: false,\r\n      home: Scaffold(\r\n        appBar: AppBar(title: const Text(\"Error\")),\r\n        body: Center(\r\n          child: Text(\r\n            message,\r\n            style: const TextStyle(fontSize: 18, color: Colors.red),\r\n            textAlign: TextAlign.center,\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}\r\n"
        }
    ]
}